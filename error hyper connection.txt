msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
Error in main worker connection: connection closed before message completed, service path: "./api/main-empty"
Error in main worker connection: connection closed before message completed, service path: "./api/main-empty"
Error in main worker connection: connection closed before message completed, service path: "./api/main-empty"
Error in main worker connection: connection closed before message completed, service path: "./api/main-empty"
Worker event loop panicked TypeError: request body receiver not connected (request closed)
    at async Object.write (ext:deno_web/06_streams.js:914:9)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: connection closed before message completed, service path: "./api/main"
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
hyper::Error(User(Service), operation was canceled: connection was not ready

Caused by:
    connection was not ready)
Error in main worker connection: connection closed before message completed, service path: "./api/main"
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
Error in main worker connection: connection closed before message completed, service path: "./api/main"
hyper::Error(User(Service), operation was canceled: connection was not ready

Caused by:
    connection was not ready)
Error in main worker connection: connection closed before message completed, service path: "./api/main"
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
hyper::Error(User(Service), operation was canceled: connection was not ready

Caused by:
    connection was not ready)
hyper::Error(User(Service), operation was canceled: connection was not ready

Caused by:
    connection was not ready)
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32), service path: "./api/main"
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32), service path: "./api/main"
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32), service path: "./api/main"
Error in main worker connection: connection closed before message completed, service path: "./api/main"
hyper::Error(User(Service), connection closed before message completed)
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
hyper::Error(User(Service), operation was canceled: connection was not ready

Caused by:
    connection was not ready)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32), service path: "./api/main"
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), operation was canceled: connection closed before message completed

Caused by:
    connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)

CONCURRENT2
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"content-type": "application/json", "accept": "*/*", "host": "localhost:9000", "content-length": "19"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "19", "content-type": "application/json", "host": "localhost:9000"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }

// ========================================================================================================

msg = WorkerRequestMsg { req: Request { method: GET, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: GET, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }

msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-length": "0", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-length": "0", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-length": "0", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-length": "0", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-length": "0", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-length": "0", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-length": "0", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-length": "0", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: /api/main-empty, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "hey/0.0.1", "content-length": "0", "content-type": "text/html", "accept-encoding": "gzip"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/api/main-empty, version: HTTP/1.1, headers: {"accept-encoding": "gzip", "content-length": "0", "content-type": "text/html", "host": "localhost:9000", "user-agent": "hey/0.0.1"}, body: Body(Empty) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }