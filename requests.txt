Для переноса кэша пакетов необходимо на сервере установить переменную окружения XDG_CACHE_HOME в файле .bashrc:
export XDG_CACHE_HOME=$HOME/deno_cache
и скопировать туда с рабочей машины все зависимости

./target/release/edge-runtime "$@" start --verbose --main-service ./api/main
./target/release/edge-runtime "$@" start --main-service ./api/main

edge-runtime.exe start --main-service C:\Users\user\ДОКУМЕНТЫ\Work\edge-runtime\api\main
edge-runtime.exe start --verbose --main-service C:\Users\user\ДОКУМЕНТЫ\Work\edge-runtime\api\main

./target/release/edge-runtime "$@" start --verbose --main-service ./api/main --import-map ./api/import_map.json
./target/release/edge-runtime "$@" start --main-service ./api/main --import-map ./api/import_map.json

./target/debug/edge-runtime-main "$@" start --main-service ./api/main
./target/debug/edge-runtime-main "$@" start --verbose --main-service ./api/main

./target/debug/edge-runtime "$@" start --main-service ./api/main
./target/debug/edge-runtime "$@" start --verbose --main-service ./api/main

./target/debug/edge-runtime "$@" start --verbose --main-service ./api/main --import-map ./api/import_map.json
./target/debug/edge-runtime "$@" start --main-service ./api/main --import-map ./api/import_map.json

./target/debug/edge-runtime "$@" start --verbose --nmw 2 --main-service ./api/main --import-map ./api/import_map.json
./target/debug/edge-runtime "$@" start --nmw 2 --main-service ./api/main --import-map ./api/import_map.json

curl --request GET 'http://localhost:9000/api/workerpool'

curl --request POST 'http://localhost:9000/api/workerpool/add_worker' \
 --header 'Content-Type: application/json' \
 --data-raw '{"api_service_path": "docx", "life_time_ms": 15000, "no_module_cache": false, "restart": false, "num_workers": 2}'

 curl --request POST 'http://localhost:9000/api/workerpool/add_worker' \
 --header 'Content-Type: application/json' \
 --data-raw '{"api_service_path": "main-empty", "life_time_ms": 15000, "no_module_cache": false, "restart": false, "num_workers": 2}'

curl --request POST 'http://localhost:9000/api/workerpool/shutdown_worker' \
 --header 'Content-Type: application/json' \
 --data-raw '{"key": "dbee5fb0-4fdd-4257-bb56-477a49c5ffa7"}'

 curl --request POST 'http://localhost:9000/api/workerpool/shutdown_worker' \
 --header 'Content-Type: application/json' \
 --data-raw '{"service_path": "xlsx-template"}'

curl --request GET 'http://localhost:9000/api/excel'
curl --request POST 'http://localhost:9000/api/xlsx-template' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST 'http://localhost:9000/api/pdf-lib' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST 'http://localhost:9000/api/docx' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/geolib' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request GET 'http://localhost:9000/api/lodash'

curl --request GET 'http://localhost:9000/api/http-server'

curl --request POST 'http://localhost:9000/api/docxtemplater' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request GET 'http://localhost:9000/api/oak/metrics'
curl --request GET 'http://localhost:9000/api/oak'
curl --request GET 'http://localhost:9000/api/oak/reboot'
curl --request GET 'http://localhost:9000/api/oak/redirect'
curl --request POST "http://localhost:9000/api/oak/excel"
curl --request POST 'http://localhost:9000/api/oak/docx'
curl --request POST 'http://localhost:9000/api/oak/pdf'
curl --request POST 'http://localhost:9000/api/oak/greet' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST 'http://localhost:9000/api/oak/postgres' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST "http://localhost:9000/api/oak/fibonacci" --header "Content-Type: application/json" --data-raw "{"n": 15}"
curl --request POST "http://localhost:9000/api/oak/fibonacci2" --header "Content-Type: application/json" --data-raw "{"n": 18}"

curl --request POST "http://localhost:9000/api/main-empty" --header "Content-Type: application/json" --data-raw "{"name": "John Doe"}"
curl --request POST "http://localhost:9000/api/empty-response" --header "Content-Type: application/json" --data-raw "{"name": "John Doe"}"

curl --request POST "http://localhost:9000/api/hello-world" --header "Content-Type: application/json" --data-raw "{'name': 'John Doe'}"

curl --request POST 'http://localhost:9000/api/postgres-on-the-edge' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/sse' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/stripe-web-hook' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/wasm' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/wasm-stream' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST "http://localhost:9000/api/ramda" --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/test' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request GET 'http://localhost:9000/api/test'

curl --request POST 'http://localhost:9000/api/test-event-loop' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request POST 'http://localhost:9000/api/axios' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request GET 'http://localhost:9000/api/axios'
curl --request GET 'http://localhost:9000/api/express'
curl --request GET 'http://localhost:9000/api/fetch'
curl --request GET 'http://localhost:9000/api/hono'
curl --request POST 'http://localhost:9000/api/hono/postgres' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST 'http://localhost:9000/api/hono/metrics' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'
curl --request POST 'http://localhost:9000/api/hono/fibonacci' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

curl --request GET 'http://localhost:9000/api/esprima'

curl --request POST 'http://localhost:9000/api/readable-stream-resp' --header 'Content-Type: application/json' --data-raw '{"name": "John Doe"}'

./hey -z 30s -c 100 -t 0 http://localhost:9000/api/oak/postgres
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/xlsx-template
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/docx
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/pdf-lib
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/main-empty
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/hono
./hey -z 30s -c 100 -t 0 http://localhost:9000/api/empty-response

./hey -z 10s -c 300 -t 0 http://localhost:9000/api/oak/postgres
./hey -z 10s -c 100 -t 0 http://localhost:9000/api/xlsx-template
./hey -z 10s -c 100 -t 0 http://localhost:9000/api/docx
./hey -z 10s -c 100 -t 0 http://localhost:9000/api/pdf-lib

./hey -z 10s -c 100 -t 0 -m POST -T application/json http://localhost:9000/api/oak/postgres
./hey -z 10s -c 100 -t 0 -m POST -T application/json http://localhost:9000/api/oak/excel
./hey -z 10s -c 100 -t 0 -m POST -T application/json http://localhost:9000/api/oak/docx
./hey -z 10s -c 100 -t 0 -m POST -T application/json http://localhost:9000/api/oak/pdf

./hey -z 5s -c 100 -t 0 -m POST -T application/json -d name:Jon http://localhost:9000/api/main-empty
./hey -z 20s -c 20 -t 0 -m POST -T application/json -d name:Jon http://localhost:9000/api/oak/postgres
./hey -z 10s -c 200 -t 0 -m POST -T application/json -d http://localhost:9000/api/oak/fibonacci
./hey -z 10s -c 200 -t 0 -m POST -T application/json -d http://localhost:9000/api/oak/fibonacci2
./hey -z 5s -c 20 -t 0 -m POST -T application/json -d name:Jon http://localhost:9000/api/oak/greet
./hey -z 20s -c 20 -t 0 -m POST -T application/json -d name:Jon http://localhost:9000/api/postgres-on-the-edge

./hey -z 10s -c 200 -t 0 http://localhost:9000/api/oak/fibonacci
./hey -z 10s -c 200 -t 0 http://localhost:9000/api/oak/fibonacci2

./hey -z 10s -c 200 -t 0 http://localhost:9000/api/hono/fibonacci
./hey -z 10s -c 200 -t 0 http://localhost:9000/api/hono/fibonacci2


let client = async move {
            let tcp = tcp_connect(&addr).await.expect("connect");
            let (mut client, conn) = conn::http1::handshake(tcp).await.expect("handshake");

            tokio::task::spawn(async move {
                conn.await.expect("http conn");
            });

            let req = Request::builder()
                .uri("/a")
                .body(Empty::<Bytes>::new())
                .unwrap();
            let mut res = client.send_request(req).await.expect("send_request");
            assert_eq!(res.status(), hyper::StatusCode::OK);
            assert!(res.body_mut().frame().await.is_none());
        };


#[op]
fn op_http_start(
  state: &mut OpState,
  tcp_stream_rid: ResourceId,
) -> Result<ResourceId, AnyError> {
  if let Ok(resource_rc) = state
    .resource_table
    .take::<TcpStreamResource>(tcp_stream_rid)
  {
    // This TCP connection might be used somewhere else. If it's the case, we cannot proceed with the
    // process of starting a HTTP server on top of this TCP connection, so we just return a bad
    // resource error. See also: https://github.com/denoland/deno/pull/16242
    let resource = Rc::try_unwrap(resource_rc)
      .map_err(|_| bad_resource("TCP stream is currently in use"))?;
    let (read_half, write_half) = resource.into_inner();
    let tcp_stream = read_half.reunite(write_half)?;
    let addr = tcp_stream.local_addr()?;
    return http_create_conn_resource(state, tcp_stream, addr, "http");
  }

  if let Ok(resource_rc) = state
    .resource_table
    .take::<TlsStreamResource>(tcp_stream_rid)
  {
    // This TLS connection might be used somewhere else. If it's the case, we cannot proceed with the
    // process of starting a HTTP server on top of this TLS connection, so we just return a bad
    // resource error. See also: https://github.com/denoland/deno/pull/16242
    let resource = Rc::try_unwrap(resource_rc)
      .map_err(|_| bad_resource("TLS stream is currently in use"))?;
    let (read_half, write_half) = resource.into_inner();
    let tls_stream = read_half.reunite(write_half);
    let addr = tls_stream.get_ref().0.local_addr()?;
    return http_create_conn_resource(state, tls_stream, addr, "https");
  }

  #[cfg(unix)]
  if let Ok(resource_rc) = state
    .resource_table
    .take::<deno_net::io::UnixStreamResource>(tcp_stream_rid)
  {
    super::check_unstable(state, "Deno.serveHttp");

    // This UNIX socket might be used somewhere else. If it's the case, we cannot proceed with the
    // process of starting a HTTP server on top of this UNIX socket, so we just return a bad
    // resource error. See also: https://github.com/denoland/deno/pull/16242
    let resource = Rc::try_unwrap(resource_rc)
      .map_err(|_| bad_resource("UNIX stream is currently in use"))?;
    let (read_half, write_half) = resource.into_inner();
    let unix_stream = read_half.reunite(write_half)?;
    let addr = unix_stream.local_addr()?;
    return http_create_conn_resource(state, unix_stream, addr, "http+unix");
  }

  Err(bad_resource_id())
}


#[op]
async fn op_net_accept_tcp(
  state: Rc<RefCell<OpState>>,
  rid: ResourceId,
) -> Result<(ResourceId, IpAddr, IpAddr), AnyError> {
  let resource = state
    .borrow()
    .resource_table
    .get::<TcpListenerResource>(rid)
    .map_err(|_| bad_resource("Listener has been closed"))?;
  let listener = RcRef::map(&resource, |r| &r.listener)
    .try_borrow_mut()
    .ok_or_else(|| custom_error("Busy", "Another accept task is ongoing"))?;
  let cancel = RcRef::map(resource, |r| &r.cancel);
  let (tcp_stream, _socket_addr) = listener
    .accept()
    .try_or_cancel(cancel)
    .await
    .map_err(accept_err)?;
  let local_addr = tcp_stream.local_addr()?;
  let remote_addr = tcp_stream.peer_addr()?;

  let mut state = state.borrow_mut();
  let rid = state
    .resource_table
    .add(TcpStreamResource::new(tcp_stream.into_split()));
  Ok((rid, IpAddr::from(local_addr), IpAddr::from(remote_addr)))
}


#[op]
fn op_net_listen_tcp<NP>(
  state: &mut OpState,
  addr: IpAddr,
  reuse_port: bool,
) -> Result<(ResourceId, IpAddr), AnyError>
where
  NP: NetPermissions + 'static,
{
  if reuse_port {
    super::check_unstable(state, "Deno.listen({ reusePort: true })");
  }
  state
    .borrow_mut::<NP>()
    .check_net(&(&addr.hostname, Some(addr.port)), "Deno.listen()")?;
  let addr = resolve_addr_sync(&addr.hostname, addr.port)?
    .next()
    .ok_or_else(|| generic_error("No resolved address found"))?;
  let domain = if addr.is_ipv4() {
    Domain::IPV4
  } else {
    Domain::IPV6
  };
  let socket = Socket::new(domain, Type::STREAM, None)?;
  #[cfg(not(windows))]
  socket.set_reuse_address(true)?;
  if reuse_port {
    #[cfg(target_os = "linux")]
    socket.set_reuse_port(true)?;
  }
  let socket_addr = socket2::SockAddr::from(addr);
  socket.bind(&socket_addr)?;
  socket.listen(128)?;
  socket.set_nonblocking(true)?;
  let std_listener: std::net::TcpListener = socket.into();
  let listener = TcpListener::from_std(std_listener)?;
  let local_addr = listener.local_addr()?;
  let listener_resource = TcpListenerResource {
    listener: AsyncRefCell::new(listener),
    cancel: Default::default(),
  };
  let rid = state.resource_table.add(listener_resource);

  Ok((rid, IpAddr::from(local_addr)))
}









// ==================================================================================
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), error writing a body to connection: Broken pipe (os error 32)

Caused by:
    Broken pipe (os error 32))
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), error writing a body to connection: Broken pipe (os error 32)

Caused by:
    Broken pipe (os error 32))
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), operation was canceled: connection closed before message completed

Caused by:
    connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), error writing a body to connection: Broken pipe (os error 32)

Caused by:
    Broken pipe (os error 32))
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
Error in main worker connection: error writing a body to connection: Broken pipe (os error 32)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: error writing a body to connection: Broken

// ==================================================================================

Worker (44610f31-ba3b-4585-8de9-3261c86822b9) service request path: ./api/oak
^CShutdown signal received...
[uncaught application error]: BadResource - unix stream channel is closed

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState

    at async Listener.accept (ext:deno_net/01_net.js:201:53)
    at async accept (https://deno.land/x/oak@v12.3.0/http_server_native.ts:94:38)
[uncaught application error]: BadResource - rx channel is not present in GothamState
[uncaught application error]: BadResource - unix stream channel is closed
// ==================================================================================


sudo -u postgres psql

main function started
serving the request with ./examples/postgres-on-the-edge
databaseUrl =  postgres://postgres:123@127.0.0.1:5432/rust_test?application_name=my_custom_app
Listening on http://localhost:9999/
Sending fatal alert BadCertificate
Error: invalid peer certificate contents: invalid peer certificate: UnknownIssuer
    at async write (ext:deno_net/01_net.js:27:10)
    at async BufWriter.flush (https://deno.land/std@0.114.0/io/buffer.ts:634:29)
    at async Connection.#sendStartupMessage (https://deno.land/x/postgres@v0.14.0/connection/connection.ts:150:9)
    at async Connection.#startup (https://deno.land/x/postgres@v0.14.0/connection/connection.ts:232:36)
    at async Connection.startup (https://deno.land/x/postgres@v0.14.0/connection/connection.ts:311:21)
    at async PoolClient.connect (https://deno.land/x/postgres@v0.14.0/client.ts:131:13)
    at async DeferredAccessStack.pop (https://deno.land/x/postgres@v0.14.0/utils/deferred.ts:94:13)
    at async Server.<anonymous> (file:///home/eugene/RustProjects/edge-runtime/examples/postgres-on-the-edge/index.ts:14:28)
    at async Server.#respond (https://deno.land/std@0.168.0/http/server.ts:221:24)

    Решение проблемы с сертификатом для PostgreSQL в Deno: установить tls.enablrd=false
    https://deno-postgres.com/#/?id=ssltls-connection


import { Client } from 'https://deno.land/x/postgres@v0.14.2/mod.ts';
import { serve } from 'https://deno.land/std@0.168.0/http/server.ts';

console.log('Postgres function started...');

// Get the connection string from the environment variable "DATABASE_URL"
// const databaseUrl = Deno.env.get('DATABASE_URL')!
// const databaseUrl = "postgres://postgres:123@127.0.0.1:5432/rust_test?application_name=my_custom_app"


const client = new Client({
    user: "postgres",
    password: "123",
    database: "rust_test",
    hostname: "127.0.0.1",
    port: 5432,
    tls: {
        enabled: false,
    },
});  
  
serve(async (_req) => {
  try {
    await client.connect();  

    try {  
        const users = await client.queryObject("SELECT ID, NAME FROM USERS");
        console.log(users.rows); // [{id: 1, name: 'Carlos'}, {id: 2, name: 'John'}, ...]
        // Encode the result as pretty printed JSON
        const body = JSON.stringify(
            users,
            (_key, value) => (typeof value === 'bigint' ? value.toString() : value),
            2
        );
      // Return the response with the correct content type header
      return new Response(body, {
        status: 200,
        headers: {
          'Content-Type': 'application/json; charset=utf-8',
        },
      });
    } finally {
      // Release the connection back into the pool
      await client.end();
    }
  } catch (err) {
    console.error(err);
    return new Response(String(err?.message ?? err), { status: 500 });
  }
})
// ==================================================================================

hyper::Error(User(Service), connection closed before message completed)
Error in main worker connection: connection closed before message completed
hyper::Error(User(Service), operation was canceled: connection was not ready
Caused by:
    connection was not ready)
^Cshutdown signal received

// ================================== globalThis =============================================
Window {
  Deno: {
    listen: [Function: listen],
    connect: [AsyncFunction: connect],
    connectTls: [AsyncFunction: connectTls],
    startTls: [AsyncFunction: startTls],
    resolveDns: [AsyncFunction: resolveDns],
    serveHttp: [Function: serveHttp],
    permissions: Permissions {},
    Permissions: [Class: Permissions],
    PermissionStatus: [Class: PermissionStatus],
    errors: {
      NotFound: [Class: NotFound],
      PermissionDenied: [Class: PermissionDenied],
      ConnectionRefused: [Class: ConnectionRefused],
      ConnectionReset: [Class: ConnectionReset],
      ConnectionAborted: [Class: ConnectionAborted],
      NotConnected: [Class: NotConnected],
      AddrInUse: [Class: AddrInUse],
      AddrNotAvailable: [Class: AddrNotAvailable],
      BrokenPipe: [Class: BrokenPipe],
      AlreadyExists: [Class: AlreadyExists],
      InvalidData: [Class: InvalidData],
      TimedOut: [Class: TimedOut],
      Interrupted: [Class: Interrupted],
      WriteZero: [Class: WriteZero],
      UnexpectedEof: [Class: UnexpectedEof],
      BadResource: [Class: BadResource],
      Http: [Class: Http],
      Busy: [Class: Busy],
      NotSupported: [Class: NotSupported]
    },
    build: {
      target: "x86_64-unknown-linux-gnu",
      arch: "x86_64",
      os: "linux",
      vendor: "unknown",
      env: "gnu"
    },
    env: {
      get: [Function: getEnv],
      toObject: [Function: toObject],
      set: [Function: setEnv],
      has: [Function: has],
      delete: [Function: deleteEnv]
    },
    pid: undefined,
    args: [],
    mainModule: [Getter/Setter]
  },
  queueMicrotask: [Function: queueMicrotask],
  clearInterval: [Function: clearInterval],
  clearTimeout: [Function: clearTimeout],
  setInterval: [Function: setInterval],
  setTimeout: [Function: setTimeout],
  fetch: [Function: fetch],
  atob: [Function: atob],
  btoa: [Function: btoa],
  crypto: Crypto {},
  reportError: [Function: reportError],
  performance: Performance {},
  window: [Getter/Setter],
  self: [Getter/Setter],
  onerror: [Getter/Setter],
  onload: [Getter/Setter],
  onbeforeunload: [Getter/Setter],
  onunload: [Getter/Setter],
  onunhandledrejection: [Getter/Setter],
  [Symbol("[[webidl.brand]]")]: Symbol("[[webidl.brand]]"),
  [Symbol()]: {
    assignedSlot: false,
    hasActivationBehavior: false,
    host: null,
    listeners: {},
    mode: ""
  }
}

main function started

msg = WorkerRequestMsg { req: Request { method: POST, uri: /hello-world, version: HTTP/1.1, headers: {"host": "localhost:9000", "user-agent": "curl/7.58.0", "accept": "*/*", "content-type": "application/json", "content-length": "20"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }
serving the request with ./examples/hello-world

DEBUG Opening cache /home/eugene/.cache/deno/dep_analysis_cache_v1...

msg = WorkerRequestMsg { req: Request { method: POST, uri: http://localhost:9000/hello-world, version: HTTP/1.1, headers: {"accept": "*/*", "content-length": "20", "content-type": "application/json", "host": "localhost:9000", "user-agent": "curl/7.58.0"}, body: Body(Streaming) }, res_tx: Sender { inner: Some(Inner { state: State { is_complete: false, is_closed: false, is_rx_task_set: true, is_tx_task_set: false } }) } }

./osm-tile-downloader \
   --north 50.811 \
   --east 6.1649 \
   --south 50.7492 \
   --west 6.031 \
   --url https://\{s\}.tile.openstreetmap.de/\{z\}/\{x\}/\{y\}.png \
   --output ./tiles \
   --rate 10

   postgres://postgres:123@localhost:5432/rust_test
   cargo run -- serve --dbconn postgres://postgres:123@localhost:5432/rust_test

   DEBUG Max duration reached for the worker (090c5c5d-0262-4fc3-a0eb-7503be22542c). Terminating the worker (duration 15s)
thread '<unnamed>' panicked at 'required type tokio::sync::mpsc::unbounded::UnboundedReceiver<tokio::net::unix::stream::UnixStream> is not present in GothamState container', /home/eugene/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_core-0.179.0/gotham_state.rs:82:3
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
fatal runtime error: failed to initiate panic, error 5
Аварийный останов (стек памяти сброшен на диск)

cargo build && RUST_BACKTRACE=full ./target/debug/edge-runtime "$@" start --main-service ./api/main

Worker (c364b6b2-d83f-4251-83bd-4e90ec9fbe2e) service request path: ./api/excel
DEBUG Max duration reached for the worker (c364b6b2-d83f-4251-83bd-4e90ec9fbe2e). Terminating the worker (duration 9s)
thread './api/excel' panicked at 'required type tokio::sync::mpsc::unbounded::UnboundedReceiver<tokio::net::unix::stream::UnixStream> is not present in GothamState container', /home/eugene/.cargo/registry/src/github.com-1ecc6299db9ec823/deno_core-0.179.0/gotham_state.rs:82:3
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
fatal runtime error: failed to initiate panic, error 5
Аварийный останов (стек памяти сброшен на диск)

curl --header "Content-Type: application/json" \
  --request POST \
  --data '{"task":"Create postman script"}' \
  http://localhost:9000/api/oak-react/todos/

  https://ga.jspm.io/npm:gdal@0.11.1/
  https://ga.jspm.io/npm:gdal-async@3.6.4/

  import gdal from "npm:gdal";

  {
  listen: [Function: listen],
  connect: [AsyncFunction: connect],
  connectTls: [AsyncFunction: connectTls],
  startTls: [AsyncFunction: startTls],
  resolveDns: [AsyncFunction: resolveDns],
  readFileTokio: [AsyncFunction: readFileTokio],
  core: {
    callConsole: [Function: callConsole],
    console: console {
      debug: [Function: debug],
      error: [Function: error],
      info: [Function: info],
      log: [Function: log],
      warn: [Function: warn],
      dir: [Function: dir],
      dirxml: [Function: dirxml],
      table: [Function: table],
      trace: [Function: trace],
      group: [Function: group],
      groupCollapsed: [Function: groupCollapsed],
      groupEnd: [Function: groupEnd],
      clear: [Function: clear],
      count: [Function: count],
      countReset: [Function: countReset],
      assert: [Function: assert],
      profile: [Function: profile],
      profileEnd: [Function: profileEnd],
      time: [Function: time],
      timeLog: [Function: timeLog],
      timeEnd: [Function: timeEnd],
      timeStamp: [Function: timeStamp],
      context: [Function: context]
    },
    ops: {
      op_close: [Function: op_close],
      op_try_close: [Function: op_try_close],
      op_print: [Function: op_print],
      op_resources: [Function: op_resources],
      op_wasm_streaming_feed: [Function: op_wasm_streaming_feed],
      op_wasm_streaming_set_url: [Function: op_wasm_streaming_set_url],
      op_void_sync: [Function: op_void_sync],
      op_void_async: [Function: op_void_async],
      op_add: [Function: op_add],
      op_read: [Function: op_read],
      op_read_all: [Function: op_read_all],
      op_write: [Function: op_write],
      op_write_all: [Function: op_write_all],
      op_shutdown: [Function: op_shutdown],
      op_metrics: [Function: op_metrics],
      op_format_file_name: [Function: op_format_file_name],
      op_is_proxy: [Function: op_is_proxy],
      op_str_byte_length: [Function: op_str_byte_length],
      op_ref_op: [Function: op_ref_op],
      op_unref_op: [Function: op_unref_op],
      op_set_macrotask_callback: [Function: op_set_macrotask_callback],
      op_set_next_tick_callback: [Function: op_set_next_tick_callback],
      op_set_promise_reject_callback: [Function: op_set_promise_reject_callback],
      op_run_microtasks: [Function: op_run_microtasks],
      op_has_tick_scheduled: [Function: op_has_tick_scheduled],
      op_set_has_tick_scheduled: [Function: op_set_has_tick_scheduled],
      op_eval_context: [Function: op_eval_context],
      op_queue_microtask: [Function: op_queue_microtask],
      op_create_host_object: [Function: op_create_host_object],
      op_encode: [Function: op_encode],
      op_decode: [Function: op_decode],
      op_serialize: [Function: op_serialize],
      op_deserialize: [Function: op_deserialize],
      op_set_promise_hooks: [Function: op_set_promise_hooks],
      op_get_promise_details: [Function: op_get_promise_details],
      op_get_proxy_details: [Function: op_get_proxy_details],
      op_memory_usage: [Function: op_memory_usage],
      op_set_wasm_streaming_callback: [Function: op_set_wasm_streaming_callback],
      op_abort_wasm_streaming: [Function: op_abort_wasm_streaming],
      op_destructure_error: [Function: op_destructure_error],
      op_dispatch_exception: [Function: op_dispatch_exception],
      op_op_names: [Function: op_op_names],
      op_apply_source_map: [Function: op_apply_source_map],
      op_set_format_exception_callback: [Function: op_set_format_exception_callback],
      op_event_loop_has_more_work: [Function: op_event_loop_has_more_work],
      op_store_pending_promise_rejection: [Function: op_store_pending_promise_rejection],
      op_remove_pending_promise_rejection: [Function: op_remove_pending_promise_rejection],
      op_has_pending_promise_rejection: [Function: op_has_pending_promise_rejection],
      op_arraybuffer_was_detached: [Function: op_arraybuffer_was_detached],
      op_url_reparse: [Function: op_url_reparse],
      op_url_parse: [Function: op_url_parse],
      op_url_get_serialization: [Function: op_url_get_serialization],
      op_url_parse_with_base: [Function: op_url_parse_with_base],
      op_url_parse_search_params: [Function: op_url_parse_search_params],
      op_url_stringify_search_params: [Function: op_url_stringify_search_params],
      op_urlpattern_parse: [Function: op_urlpattern_parse],
      op_urlpattern_process_match_input: [Function: op_urlpattern_process_match_input],
      op_base64_decode: [Function: op_base64_decode],
      op_base64_encode: [Function: op_base64_encode],
      op_base64_atob: [Function: op_base64_atob],
      op_base64_btoa: [Function: op_base64_btoa],
      op_encoding_normalize_label: [Function: op_encoding_normalize_label],
      op_encoding_decode_single: [Function: op_encoding_decode_single],
      op_encoding_decode_utf8: [Function: op_encoding_decode_utf8],
      op_encoding_new_decoder: [Function: op_encoding_new_decoder],
      op_encoding_decode: [Function: op_encoding_decode],
      op_encoding_encode_into: [Function: op_encoding_encode_into],
      op_encode_binary_string: [Function: op_encode_binary_string],
      op_blob_create_part: [Function: op_blob_create_part],
      op_blob_slice_part: [Function: op_blob_slice_part],
      op_blob_read_part: [Function: op_blob_read_part],
      op_blob_remove_part: [Function: op_blob_remove_part],
      op_blob_create_object_url: [Function: op_blob_create_object_url],
      op_blob_revoke_object_url: [Function: op_blob_revoke_object_url],
      op_blob_from_object_url: [Function: op_blob_from_object_url],
      op_message_port_create_entangled: [Function: op_message_port_create_entangled],
      op_message_port_post_message: [Function: op_message_port_post_message],
      op_message_port_recv_message: [Function: op_message_port_recv_message],
      op_compression_new: [Function: op_compression_new],
      op_compression_write: [Function: op_compression_write],
      op_compression_finish: [Function: op_compression_finish],
      op_now: [Function: op_now],
      op_timer_handle: [Function: op_timer_handle],
      op_cancel_handle: [Function: op_cancel_handle],
      op_sleep: [Function: op_sleep],
      op_transfer_arraybuffer: [Function: op_transfer_arraybuffer],
      op_fetch: [Function: op_fetch],
      op_fetch_send: [Function: op_fetch_send],
      op_fetch_custom_client: [Function: op_fetch_custom_client],
      op_ws_check_permission_and_cancel_handle: [Function: op_ws_check_permission_and_cancel_handle],
      op_ws_create: [Function: op_ws_create],
      op_ws_send: [Function: op_ws_send],
      op_ws_close: [Function: op_ws_close],
      op_ws_next_event: [Function: op_ws_next_event],
      op_ws_send_binary: [Function: op_ws_send_binary],
      op_ws_send_text: [Function: op_ws_send_text],
      op_crypto_get_random_values: [Function: op_crypto_get_random_values],
      op_crypto_generate_key: [Function: op_crypto_generate_key],
      op_crypto_sign_key: [Function: op_crypto_sign_key],
      op_crypto_verify_key: [Function: op_crypto_verify_key],
      op_crypto_derive_bits: [Function: op_crypto_derive_bits],
      op_crypto_import_key: [Function: op_crypto_import_key],
      op_crypto_export_key: [Function: op_crypto_export_key],
      op_crypto_encrypt: [Function: op_crypto_encrypt],
      op_crypto_decrypt: [Function: op_crypto_decrypt],
      op_crypto_subtle_digest: [Function: op_crypto_subtle_digest],
      op_crypto_random_uuid: [Function: op_crypto_random_uuid],
      op_crypto_wrap_key: [Function: op_crypto_wrap_key],
      op_crypto_unwrap_key: [Function: op_crypto_unwrap_key],
      op_crypto_base64url_decode: [Function: op_crypto_base64url_decode],
      op_crypto_base64url_encode: [Function: op_crypto_base64url_encode],
      op_generate_x25519_keypair: [Function: op_generate_x25519_keypair],
      op_derive_bits_x25519: [Function: op_derive_bits_x25519],
      op_import_spki_x25519: [Function: op_import_spki_x25519],
      op_import_pkcs8_x25519: [Function: op_import_pkcs8_x25519],
      op_generate_ed25519_keypair: [Function: op_generate_ed25519_keypair],
      op_import_spki_ed25519: [Function: op_import_spki_ed25519],
      op_import_pkcs8_ed25519: [Function: op_import_pkcs8_ed25519],
      op_sign_ed25519: [Function: op_sign_ed25519],
      op_verify_ed25519: [Function: op_verify_ed25519],
      op_export_spki_ed25519: [Function: op_export_spki_ed25519],
      op_export_pkcs8_ed25519: [Function: op_export_pkcs8_ed25519],
      op_jwk_x_ed25519: [Function: op_jwk_x_ed25519],
      op_export_spki_x25519: [Function: op_export_spki_x25519],
      op_export_pkcs8_x25519: [Function: op_export_pkcs8_x25519],
      op_net_accept_tcp: [Function: op_net_accept_tcp],
      op_net_connect_tcp: [Function: op_net_connect_tcp],
      op_net_listen_tcp: [Function: op_net_listen_tcp],
      op_net_listen_udp: [Function: op_net_listen_udp],
      op_node_unstable_net_listen_udp: [Function: op_node_unstable_net_listen_udp],
      op_net_recv_udp: [Function: op_net_recv_udp],
      op_net_send_udp: [Function: op_net_send_udp],
      op_net_join_multi_v4_udp: [Function: op_net_join_multi_v4_udp],
      op_net_join_multi_v6_udp: [Function: op_net_join_multi_v6_udp],
      op_net_leave_multi_v4_udp: [Function: op_net_leave_multi_v4_udp],
      op_net_leave_multi_v6_udp: [Function: op_net_leave_multi_v6_udp],
      op_net_set_multi_loopback_udp: [Function: op_net_set_multi_loopback_udp],
      op_net_set_multi_ttl_udp: [Function: op_net_set_multi_ttl_udp],
      op_dns_resolve: [Function: op_dns_resolve],
      op_set_nodelay: [Function: op_set_nodelay],
      op_set_keepalive: [Function: op_set_keepalive],
      op_tls_start: [Function: op_tls_start],
      op_net_connect_tls: [Function: op_net_connect_tls],
      op_net_listen_tls: [Function: op_net_listen_tls],
      op_net_accept_tls: [Function: op_net_accept_tls],
      op_tls_handshake: [Function: op_tls_handshake],
      op_net_accept_unix: [Function: op_net_accept_unix],
      op_net_connect_unix: [Function: op_net_connect_unix],
      op_net_listen_unix: [Function: op_net_listen_unix],
      op_net_listen_unixpacket: [Function: op_net_listen_unixpacket],
      op_node_unstable_net_listen_unixpacket: [Function: op_node_unstable_net_listen_unixpacket],
      op_net_recv_unixpacket: [Function: op_net_recv_unixpacket],
      op_net_send_unixpacket: [Function: op_net_send_unixpacket],
      op_http_accept: [Function: op_http_accept],
      op_http_write_headers: [Function: op_http_write_headers],
      op_http_headers: [Function: op_http_headers],
      op_http_write: [Function: op_http_write],
      op_http_write_resource: [Function: op_http_write_resource],
      op_http_shutdown: [Function: op_http_shutdown],
      op_http_websocket_accept_header: [Function: op_http_websocket_accept_header],
      op_http_upgrade_websocket: [Function: op_http_upgrade_websocket],
      op_read_sync: [Function: op_read_sync],
      op_write_sync: [Function: op_write_sync],
      op_open_sync: [Function: op_open_sync],
      op_open_async: [Function: op_open_async],
      op_write_file_sync: [Function: op_write_file_sync],
      op_write_file_async: [Function: op_write_file_async],
      op_seek_sync: [Function: op_seek_sync],
      op_seek_async: [Function: op_seek_async],
      op_fdatasync_sync: [Function: op_fdatasync_sync],
      op_fdatasync_async: [Function: op_fdatasync_async],
      op_fsync_sync: [Function: op_fsync_sync],
      op_fsync_async: [Function: op_fsync_async],
      op_fstat_sync: [Function: op_fstat_sync],
      op_fstat_async: [Function: op_fstat_async],
      op_flock_sync: [Function: op_flock_sync],
      op_flock_async: [Function: op_flock_async],
      op_funlock_sync: [Function: op_funlock_sync],
      op_funlock_async: [Function: op_funlock_async],
      op_umask: [Function: op_umask],
      op_chdir: [Function: op_chdir],
      op_mkdir_sync: [Function: op_mkdir_sync],
      op_mkdir_async: [Function: op_mkdir_async],
      op_chmod_sync: [Function: op_chmod_sync],
      op_chmod_async: [Function: op_chmod_async],
      op_chown_sync: [Function: op_chown_sync],
      op_chown_async: [Function: op_chown_async],
      op_remove_sync: [Function: op_remove_sync],
      op_remove_async: [Function: op_remove_async],
      op_copy_file_sync: [Function: op_copy_file_sync],
      op_copy_file_async: [Function: op_copy_file_async],
      op_stat_sync: [Function: op_stat_sync],
      op_stat_async: [Function: op_stat_async],
      op_realpath_sync: [Function: op_realpath_sync],
      op_realpath_async: [Function: op_realpath_async],
      op_read_dir_sync: [Function: op_read_dir_sync],
      op_read_dir_async: [Function: op_read_dir_async],
      op_rename_sync: [Function: op_rename_sync],
      op_rename_async: [Function: op_rename_async],
      op_link_sync: [Function: op_link_sync],
      op_link_async: [Function: op_link_async],
      op_symlink_sync: [Function: op_symlink_sync],
      op_symlink_async: [Function: op_symlink_async],
      op_read_link_sync: [Function: op_read_link_sync],
      op_read_link_async: [Function: op_read_link_async],
      op_ftruncate_sync: [Function: op_ftruncate_sync],
      op_ftruncate_async: [Function: op_ftruncate_async],
      op_truncate_sync: [Function: op_truncate_sync],
      op_truncate_async: [Function: op_truncate_async],
      op_make_temp_dir_sync: [Function: op_make_temp_dir_sync],
      op_make_temp_dir_async: [Function: op_make_temp_dir_async],
      op_make_temp_file_sync: [Function: op_make_temp_file_sync],
      op_make_temp_file_async: [Function: op_make_temp_file_async],
      op_cwd: [Function: op_cwd],
      op_futime_sync: [Function: op_futime_sync],
      op_futime_async: [Function: op_futime_async],
      op_utime_sync: [Function: op_utime_sync],
      op_utime_async: [Function: op_utime_async],
      op_readfile_sync: [Function: op_readfile_sync],
      op_readfile_text_sync: [Function: op_readfile_text_sync],
      op_readfile_async: [Function: op_readfile_async],
      op_readfile_text_async: [Function: op_readfile_text_async],
      op_set_env: [Function: op_set_env],
      op_env: [Function: op_env],
      op_get_env: [Function: op_get_env],
      op_delete_env: [Function: op_delete_env],
      op_user_worker_create: [Function: op_user_worker_create],
      op_user_worker_fetch_build: [Function: op_user_worker_fetch_build],
      op_user_worker_fetch_send: [Function: op_user_worker_fetch_send],
      op_user_worker_shutdown: [Function: op_user_worker_shutdown],
      op_set_timeout2: [Function: op_set_timeout2],
      op_remove_file2: [Function: op_remove_file2],
      op_read_file_tokio: [Function: op_read_file_tokio],
      op_fetch_reqwest: [Function: op_fetch_reqwest],
      op_write_file_tokio: [Function: op_write_file_tokio],
      op_http_start: [Function: op_http_start],
      op_main_module: [Function: op_main_module]
    },
    opAsync: [Function: opAsync],
    opAsync2: [Function: opAsync2],
    resources: [Function: resources],
    metrics: [Function: metrics],
    registerErrorBuilder: [Function: registerErrorBuilder],
    registerErrorClass: [Function: registerErrorClass],
    buildCustomError: [Function: buildCustomError],
    opresolve: [Function: opresolve],
    BadResource: [Class: BadResource],
    BadResourcePrototype: undefined,
    Interrupted: [Class: Interrupted],
    InterruptedPrototype: undefined,
    enableOpCallTracing: [Function: enableOpCallTracing],
    isOpCallTracingEnabled: [Function: isOpCallTracingEnabled],
    opCallTraces: Map {},
    refOp: [Function: refOp],
    unrefOp: [Function: unrefOp],
    setReportExceptionCallback: [Function: setReportExceptionCallback],
    setPromiseHooks: [Function: setPromiseHooks],
    close: [Function: close],
    tryClose: [Function: tryClose],
    read: [Function: bound opAsync],
    readAll: [Function: bound opAsync],
    write: [Function: bound opAsync],
    writeAll: [Function: bound opAsync],
    shutdown: [Function: bound opAsync],
    print: [Function: print],
    setMacrotaskCallback: [Function: setMacrotaskCallback],
    setNextTickCallback: [Function: setNextTickCallback],
    runMicrotasks: [Function: runMicrotasks],
    hasTickScheduled: [Function: hasTickScheduled],
    setHasTickScheduled: [Function: setHasTickScheduled],
    evalContext: [Function: evalContext],
    createHostObject: [Function: createHostObject],
    encode: [Function: encode],
    decode: [Function: decode],
    serialize: [Function: serialize],
    deserialize: [Function: deserialize],
    getPromiseDetails: [Function: getPromiseDetails],
    getProxyDetails: [Function: getProxyDetails],
    isProxy: [Function: isProxy],
    memoryUsage: [Function: memoryUsage],
    setWasmStreamingCallback: [Function: setWasmStreamingCallback],
    abortWasmStreaming: [Function: abortWasmStreaming],
    destructureError: [Function: destructureError],
    opNames: [Function: opNames],
    eventLoopHasMoreWork: [Function: eventLoopHasMoreWork],
    setPromiseRejectCallback: [Function: setPromiseRejectCallback],
    byteLength: [Function: byteLength],
    build: {
      target: "unknown",
      arch: "unknown",
      os: "unknown",
      vendor: "unknown",
      env: undefined
    },
    setBuildInfo: [Function: setBuildInfo],
    prepareStackTrace: [Function: prepareStackTrace]
  },
  serveHttp: [Function: serveHttp],
  permissions: Permissions {},
  Permissions: [Class: Permissions],
  PermissionStatus: [Class: PermissionStatus],
  errors: {
    Interrupted: [Class: Interrupted],
    BadResource: [Class: BadResource],
    InvalidWorkerResponse: [Class: classErr] { getName: [Function (anonymous)] },
    InvalidWorkerCreation: [Class: classErr] { getName: [Function (anonymous)] },
    NotFound: [Class: classErr] { getName: [Function (anonymous)] },
    PermissionDenied: [Class: classErr] { getName: [Function (anonymous)] },
    ConnectionRefused: [Class: classErr] { getName: [Function (anonymous)] },
    ConnectionReset: [Class: classErr] { getName: [Function (anonymous)] },
    ConnectionAborted: [Class: classErr] { getName: [Function (anonymous)] },
    NotConnected: [Class: classErr] { getName: [Function (anonymous)] },
    AddrInUse: [Class: classErr] { getName: [Function (anonymous)] },
    AddrNotAvailable: [Class: classErr] { getName: [Function (anonymous)] },
    BrokenPipe: [Class: classErr] { getName: [Function (anonymous)] },
    AlreadyExists: [Class: classErr] { getName: [Function (anonymous)] },
    InvalidData: [Class: classErr] { getName: [Function (anonymous)] },
    TimedOut: [Class: classErr] { getName: [Function (anonymous)] },
    WriteZero: [Class: classErr] { getName: [Function (anonymous)] },
    WouldBlock: [Class: classErr] { getName: [Function (anonymous)] },
    UnexpectedEof: [Class: classErr] { getName: [Function (anonymous)] },
    Http: [Class: classErr] { getName: [Function (anonymous)] },
    Busy: [Class: classErr] { getName: [Function (anonymous)] },
    NotSupported: [Class: classErr] { getName: [Function (anonymous)] }
  },
  writeFileSync: [Function: writeFileSync],
  writeFile: [AsyncFunction: writeFile],
  writeTextFileSync: [Function: writeTextFileSync],
  writeTextFile: [Function: writeTextFile],
  readTextFile: [AsyncFunction: readTextFile],
  readTextFileSync: [Function: readTextFileSync],
  readFile: [AsyncFunction: readFile],
  readFileSync: [Function: readFileSync],
  chmodSync: [Function: chmodSync],
  chmod: [AsyncFunction: chmod],
  chown: [AsyncFunction: chown],
  chownSync: [Function: chownSync],
  copyFileSync: [Function: copyFileSync],
  cwd: [Function: cwd],
  makeTempDirSync: [Function: makeTempDirSync],
  makeTempDir: [Function: makeTempDir],
  makeTempFileSync: [Function: makeTempFileSync],
  makeTempFile: [Function: makeTempFile],
  mkdirSync: [Function: mkdirSync],
  mkdir: [AsyncFunction: mkdir],
  chdir: [Function: chdir],
  copyFile: [AsyncFunction: copyFile],
  readDirSync: [Function: readDirSync],
  readDir: [Function: readDir],
  readLinkSync: [Function: readLinkSync],
  readLink: [Function: readLink],
  realPathSync: [Function: realPathSync],
  realPath: [Function: realPath],
  removeSync: [Function: removeSync],
  remove: [AsyncFunction: remove],
  renameSync: [Function: renameSync],
  rename: [AsyncFunction: rename],
  statSync: [Function: statSync],
  lstatSync: [Function: lstatSync],
  stat: [AsyncFunction: stat],
  lstat: [AsyncFunction: lstat],
  truncateSync: [Function: truncateSync],
  truncate: [AsyncFunction: truncate],
  ftruncateSync: [Function: ftruncateSync],
  ftruncate: [AsyncFunction: ftruncate],
  futime: [AsyncFunction: futime],
  futimeSync: [Function: futimeSync],
  File: [Class: FsFile],
  FsFile: [Class: FsFile],
  open: [AsyncFunction: open],
  openSync: [Function: openSync],
  create: [Function: create],
  createSync: [Function: createSync],
  seek: [Function: seek],
  seekSync: [Function: seekSync],
  fstatSync: [Function: fstatSync],
  fstat: [AsyncFunction: fstat],
  fsyncSync: [Function: fsyncSync],
  fsync: [AsyncFunction: fsync],
  fdatasyncSync: [Function: fdatasyncSync],
  fdatasync: [AsyncFunction: fdatasync],
  symlink: [AsyncFunction: symlink],
  symlinkSync: [Function: symlinkSync],
  link: [AsyncFunction: link],
  linkSync: [Function: linkSync],
  utime: [AsyncFunction: utime],
  utimeSync: [Function: utimeSync],
  build: {
    target: "x86_64-unknown-linux-gnu",
    arch: "x86_64",
    os: "linux",
    vendor: "unknown",
    env: "gnu"
  },
  env: {
    get: [Function: getEnv],
    toObject: [Function: toObject],
    set: [Function: setEnv],
    has: [Function: has],
    delete: [Function: deleteEnv]
  },
  pid: undefined,
  args: [],
  mainModule: [Getter/Setter]
}


  // create Worker for server based OAK framework
  const spOak = apiPath("oak");
  const configOakWorker: ConfigWorker = {
    servicePath: spOak,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    importMapPath: "./api/import_map.json", // use imports from ./api/import_map, not from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spOak, configOakWorker, 1);

  // create Worker for xlsx-template
  const spXLSXTemplate = apiPath("xlsx-template");
  const configXLSXTemplateWorker: ConfigWorker = {
    servicePath: spXLSXTemplate,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spXLSXTemplate, configXLSXTemplateWorker, 1);

  // create Worker for Main-empty
  const spME = apiPath("main-empty");
  const configME: ConfigWorker = {
    servicePath: spME,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spME, configME, 1);

  // create Worker for postgres-on-the-edge
  const spPG = apiPath("postgres-on-the-edge");
  const configPG: ConfigWorker = {
    servicePath: spPG,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spPG, configPG, 1);
  
    // create Worker for PDF-Lib
  const spPDFLib = apiPath("pdf-lib");
  const configPDFLib: ConfigWorker = {
    servicePath: spPDFLib,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spPDFLib, configPDFLib, 1);
  
    // create Worker for DOCX
  const spDocx = apiPath("docx");
  const configDocx: ConfigWorker = {
    servicePath: spDocx,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spDocx, configDocx, 1);

  // create Worker for Main-empty
  const spME = apiPath("main-empty");
  const configME: ConfigWorker = {
    servicePath: spME,
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };
  await addWorkerToPool(spME, configME, 1);

  // create Worker for PDF-Lib
  const spPDFLib = apiPath("pdf-lib");
  const configPDFLib: ConfigWorker = {
    servicePath: spPDFLib,    
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };  
  await addWorkerToPool(spPDFLib, configPDFLib, 1);
  
  // create Worker for GEOLIB
  const spGeoLib = apiPath("geolib");
  const configGeoLibWorker: ConfigWorker = {
    servicePath: spGeoLib,    
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    restart: true, // http server will be restarted
  };  
  await addWorkerToPool(spGeoLib, configGeoLibWorker, 1);
  
  // create Worker for Mapbox-Vector-Tile
  const spMVT = apiPath("mapbox-vector-tile");
  const configMVTWorker: ConfigWorker = {
    servicePath: spMVT,    
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    restart: true, // http server will be restarted
  };  
  await addWorkerToPool(spMVT, configMVTWorker, 1);
  
  // create Worker for GDAL
  const spGDAL = apiPath("gdal");
  const configGDALWorker: ConfigWorker = {
    servicePath: spGDAL,    
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    importMapPath: "./api/gdal/import_map.json", // use imports from import_map, not from files
    restart: true, // http server will be restarted
  };  
  await addWorkerToPool(spGDAL, configGDALWorker, 1);  
  
  // create Worker for SSR based React + OAK
  const spSSR = apiPath("ssr");
  const configSSRWorker: ConfigWorker = {
    servicePath: spSSR,    
    lifeTimeMs: 1 * 1 * 1 * 60 * 60 * 1000,
    noModuleCache: false,
    // importMapPath do not define ===> null, use imports from files
    restart: true, // http server will be restarted
  };  
  await addWorkerToPool(spSSR, configSSRWorker, 1);
